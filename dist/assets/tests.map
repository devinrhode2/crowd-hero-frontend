{"version":3,"sources":["crowd-hero-frontend/tests/acceptance/contributions-test.js","crowd-hero-frontend/tests/acceptance/contributions-test.jshint.js","crowd-hero-frontend/tests/acceptance/events-test.js","crowd-hero-frontend/tests/acceptance/events-test.jshint.js","crowd-hero-frontend/tests/acceptance/individuals-test.js","crowd-hero-frontend/tests/acceptance/individuals-test.jshint.js","crowd-hero-frontend/tests/acceptance/orgs-test.js","crowd-hero-frontend/tests/acceptance/orgs-test.jshint.js","crowd-hero-frontend/tests/acceptance/users-test.js","crowd-hero-frontend/tests/acceptance/users-test.jshint.js","crowd-hero-frontend/tests/app.jshint.js","crowd-hero-frontend/tests/contribution/adapter.jshint.js","crowd-hero-frontend/tests/contribution/model.jshint.js","crowd-hero-frontend/tests/contributions/edit/route.jshint.js","crowd-hero-frontend/tests/contributions/index/route.jshint.js","crowd-hero-frontend/tests/contributions/new/route.jshint.js","crowd-hero-frontend/tests/event/adapter.jshint.js","crowd-hero-frontend/tests/event/model.jshint.js","crowd-hero-frontend/tests/events/edit/route.jshint.js","crowd-hero-frontend/tests/events/index/route.jshint.js","crowd-hero-frontend/tests/events/new/route.jshint.js","crowd-hero-frontend/tests/helpers/destroy-app.js","crowd-hero-frontend/tests/helpers/destroy-app.jshint.js","crowd-hero-frontend/tests/helpers/module-for-acceptance.js","crowd-hero-frontend/tests/helpers/module-for-acceptance.jshint.js","crowd-hero-frontend/tests/helpers/resolver.js","crowd-hero-frontend/tests/helpers/resolver.jshint.js","crowd-hero-frontend/tests/helpers/start-app.js","crowd-hero-frontend/tests/helpers/start-app.jshint.js","crowd-hero-frontend/tests/index/route.jshint.js","crowd-hero-frontend/tests/individual/adapter.jshint.js","crowd-hero-frontend/tests/individual/model.jshint.js","crowd-hero-frontend/tests/individuals/edit/route.jshint.js","crowd-hero-frontend/tests/individuals/index/route.jshint.js","crowd-hero-frontend/tests/individuals/new/route.jshint.js","crowd-hero-frontend/tests/mirage/config.jshint.js","crowd-hero-frontend/tests/mirage/factories/contact.jshint.js","crowd-hero-frontend/tests/mirage/factories/contribution.jshint.js","crowd-hero-frontend/tests/mirage/factories/event.jshint.js","crowd-hero-frontend/tests/mirage/factories/individual.jshint.js","crowd-hero-frontend/tests/mirage/factories/org.jshint.js","crowd-hero-frontend/tests/mirage/factories/user.jshint.js","crowd-hero-frontend/tests/mirage/scenarios/default.jshint.js","crowd-hero-frontend/tests/mixins/contributions/save-model-mixin.jshint.js","crowd-hero-frontend/tests/mixins/events/save-model-mixin.jshint.js","crowd-hero-frontend/tests/mixins/individuals/save-model-mixin.jshint.js","crowd-hero-frontend/tests/mixins/orgs/save-model-mixin.jshint.js","crowd-hero-frontend/tests/mixins/users/save-model-mixin.jshint.js","crowd-hero-frontend/tests/org/adapter.jshint.js","crowd-hero-frontend/tests/org/model.jshint.js","crowd-hero-frontend/tests/orgs/edit/route.jshint.js","crowd-hero-frontend/tests/orgs/index/route.jshint.js","crowd-hero-frontend/tests/orgs/new/route.jshint.js","crowd-hero-frontend/tests/resolver.jshint.js","crowd-hero-frontend/tests/router.jshint.js","crowd-hero-frontend/tests/test-helper.js","crowd-hero-frontend/tests/test-helper.jshint.js","crowd-hero-frontend/tests/transforms/array.jshint.js","crowd-hero-frontend/tests/unit/event/model-test.js","crowd-hero-frontend/tests/unit/event/model-test.jshint.js","crowd-hero-frontend/tests/unit/index/route-test.js","crowd-hero-frontend/tests/unit/index/route-test.jshint.js","crowd-hero-frontend/tests/unit/individual/model-test.js","crowd-hero-frontend/tests/unit/individual/model-test.jshint.js","crowd-hero-frontend/tests/unit/org/model-test.js","crowd-hero-frontend/tests/unit/org/model-test.jshint.js","crowd-hero-frontend/tests/unit/transforms/array-test.js","crowd-hero-frontend/tests/unit/transforms/array-test.jshint.js","crowd-hero-frontend/tests/unit/user/model-test.js","crowd-hero-frontend/tests/unit/user/model-test.jshint.js","crowd-hero-frontend/tests/user/adapter.jshint.js","crowd-hero-frontend/tests/user/model.jshint.js","crowd-hero-frontend/tests/users/edit/route.jshint.js","crowd-hero-frontend/tests/users/index/route.jshint.js","crowd-hero-frontend/tests/users/new/route.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('crowd-hero-frontend/tests/acceptance/contributions-test', ['exports', 'ember', 'qunit', 'crowd-hero-frontend/tests/helpers/start-app'], function (exports, _ember, _qunit, _crowdHeroFrontendTestsHelpersStartApp) {\n\n  var application;\n  var originalConfirm;\n  var confirmCalledWith;\n\n  (0, _qunit.module)('Acceptance: Contribution', {\n    beforeEach: function beforeEach() {\n      application = (0, _crowdHeroFrontendTestsHelpersStartApp['default'])();\n      originalConfirm = window.confirm;\n      window.confirm = function () {\n        confirmCalledWith = [].slice.call(arguments);\n        return true;\n      };\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(application, 'destroy');\n      window.confirm = originalConfirm;\n      confirmCalledWith = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /contributions without data', function (assert) {\n    visit('/contributions');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'contributions.index');\n      assert.equal(find('#blankslate').text().trim(), 'No Contributions found');\n    });\n  });\n\n  (0, _qunit.test)('visiting /contributions with data', function (assert) {\n    server.create('contribution');\n    visit('/contributions');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'contributions.index');\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('create a new contribution', function (assert) {\n    visit('/contributions');\n    click('a:contains(New Contribution)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'contributions.new');\n\n      fillIn('label:contains(Type) input', 'MyString');\n      fillIn('label:contains(Contributor) input', 'MyString');\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Event) input', 'MyString');\n      fillIn('label:contains(Donationamount) input', 'MyString');\n      fillIn('label:contains(Hours) input', 42);\n      fillIn('label:contains(Skilled) input', false);\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('update an existing contribution', function (assert) {\n    server.create('contribution');\n    visit('/contributions');\n    click('a:contains(Edit)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'contributions.edit');\n\n      fillIn('label:contains(Type) input', 'MyString');\n      fillIn('label:contains(Contributor) input', 'MyString');\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Event) input', 'MyString');\n      fillIn('label:contains(Donationamount) input', 'MyString');\n      fillIn('label:contains(Hours) input', 42);\n      fillIn('label:contains(Skilled) input', false);\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('show an existing contribution', function (assert) {\n    server.create('contribution');\n    visit('/contributions');\n    click('a:contains(Show)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'contributions.show');\n\n      assert.equal(find('p strong:contains(Type:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Contributor:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Causes:)').next().text(), []);\n      assert.equal(find('p strong:contains(Event:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Donationamount:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Hours:)').next().text(), 42);\n      assert.equal(find('p strong:contains(Skilled:)').next().text(), false);\n    });\n  });\n\n  (0, _qunit.test)('delete a contribution', function (assert) {\n    server.create('contribution');\n    visit('/contributions');\n    click('a:contains(Remove)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'contributions.index');\n      assert.deepEqual(confirmCalledWith, ['Are you sure?']);\n      assert.equal(find('#blankslate').length, 1);\n    });\n  });\n});","define('crowd-hero-frontend/tests/acceptance/contributions-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/contributions-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/contributions-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/acceptance/events-test', ['exports', 'ember', 'qunit', 'crowd-hero-frontend/tests/helpers/start-app'], function (exports, _ember, _qunit, _crowdHeroFrontendTestsHelpersStartApp) {\n\n  var application;\n  var originalConfirm;\n  var confirmCalledWith;\n\n  (0, _qunit.module)('Acceptance: Event', {\n    beforeEach: function beforeEach() {\n      application = (0, _crowdHeroFrontendTestsHelpersStartApp['default'])();\n      originalConfirm = window.confirm;\n      window.confirm = function () {\n        confirmCalledWith = [].slice.call(arguments);\n        return true;\n      };\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(application, 'destroy');\n      window.confirm = originalConfirm;\n      confirmCalledWith = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /events without data', function (assert) {\n    visit('/events');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'events.index');\n      assert.equal(find('#blankslate').text().trim(), 'No Events found');\n    });\n  });\n\n  (0, _qunit.test)('visiting /events with data', function (assert) {\n    server.create('event');\n    visit('/events');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'events.index');\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('create a new event', function (assert) {\n    visit('/events');\n    click('a:contains(New Event)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'events.new');\n\n      fillIn('label:contains(Type) input', 'MyString');\n      fillIn('label:contains(String) input', 'MyString');\n      fillIn('label:contains(Starttime) input', new Date());\n      fillIn('label:contains(Endtime) input', new Date());\n      fillIn('label:contains(Location) input', 'MyString');\n      fillIn('label:contains(Organizer) input', 'MyString');\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributors) input', 'MyString');\n      fillIn('label:contains(Beneficiary) input', 'MyString');\n      fillIn('label:contains(Eventimagesrc) input', 'MyString');\n      fillIn('label:contains(Description) input', 'MyString');\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Expectedvolunteers) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('update an existing event', function (assert) {\n    server.create('event');\n    visit('/events');\n    click('a:contains(Edit)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'events.edit');\n\n      fillIn('label:contains(Type) input', 'MyString');\n      fillIn('label:contains(String) input', 'MyString');\n      fillIn('label:contains(Starttime) input', new Date());\n      fillIn('label:contains(Endtime) input', new Date());\n      fillIn('label:contains(Location) input', 'MyString');\n      fillIn('label:contains(Organizer) input', 'MyString');\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributors) input', 'MyString');\n      fillIn('label:contains(Beneficiary) input', 'MyString');\n      fillIn('label:contains(Eventimagesrc) input', 'MyString');\n      fillIn('label:contains(Description) input', 'MyString');\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Expectedvolunteers) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('show an existing event', function (assert) {\n    server.create('event');\n    visit('/events');\n    click('a:contains(Show)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'events.show');\n\n      assert.equal(find('p strong:contains(Type:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(String:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Starttime:)').next().text(), new Date());\n      assert.equal(find('p strong:contains(Endtime:)').next().text(), new Date());\n      assert.equal(find('p strong:contains(Location:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Organizer:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Causes:)').next().text(), []);\n      assert.equal(find('p strong:contains(Contributors:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Beneficiary:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Eventimagesrc:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Description:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Name:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Expectedvolunteers:)').next().text(), 'MyString');\n    });\n  });\n\n  (0, _qunit.test)('delete a event', function (assert) {\n    server.create('event');\n    visit('/events');\n    click('a:contains(Remove)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'events.index');\n      assert.deepEqual(confirmCalledWith, ['Are you sure?']);\n      assert.equal(find('#blankslate').length, 1);\n    });\n  });\n});","define('crowd-hero-frontend/tests/acceptance/events-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/events-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/events-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/acceptance/individuals-test', ['exports', 'ember', 'qunit', 'crowd-hero-frontend/tests/helpers/start-app'], function (exports, _ember, _qunit, _crowdHeroFrontendTestsHelpersStartApp) {\n\n  var application;\n  var originalConfirm;\n  var confirmCalledWith;\n\n  (0, _qunit.module)('Acceptance: Individual', {\n    beforeEach: function beforeEach() {\n      application = (0, _crowdHeroFrontendTestsHelpersStartApp['default'])();\n      originalConfirm = window.confirm;\n      window.confirm = function () {\n        confirmCalledWith = [].slice.call(arguments);\n        return true;\n      };\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(application, 'destroy');\n      window.confirm = originalConfirm;\n      confirmCalledWith = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /individuals without data', function (assert) {\n    visit('/individuals');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'individuals.index');\n      assert.equal(find('#blankslate').text().trim(), 'No Individuals found');\n    });\n  });\n\n  (0, _qunit.test)('visiting /individuals with data', function (assert) {\n    server.create('individual');\n    visit('/individuals');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'individuals.index');\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('create a new individual', function (assert) {\n    visit('/individuals');\n    click('a:contains(New Individual)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'individuals.new');\n\n      fillIn('label:contains(Org) input', 'MyString');\n      fillIn('label:contains(Hourlyrate) input', 42);\n      fillIn('label:contains(Locations) input', []);\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributions) input', 'MyString');\n      fillIn('label:contains(Industries) input', []);\n      fillIn('label:contains(Receivedcontributions) input', 'MyString');\n      fillIn('label:contains(Skills) input', []);\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('update an existing individual', function (assert) {\n    server.create('individual');\n    visit('/individuals');\n    click('a:contains(Edit)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'individuals.edit');\n\n      fillIn('label:contains(Org) input', 'MyString');\n      fillIn('label:contains(Hourlyrate) input', 42);\n      fillIn('label:contains(Locations) input', []);\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributions) input', 'MyString');\n      fillIn('label:contains(Industries) input', []);\n      fillIn('label:contains(Receivedcontributions) input', 'MyString');\n      fillIn('label:contains(Skills) input', []);\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('show an existing individual', function (assert) {\n    server.create('individual');\n    visit('/individuals');\n    click('a:contains(Show)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'individuals.show');\n\n      assert.equal(find('p strong:contains(Org:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Hourlyrate:)').next().text(), 42);\n      assert.equal(find('p strong:contains(Locations:)').next().text(), []);\n      assert.equal(find('p strong:contains(Causes:)').next().text(), []);\n      assert.equal(find('p strong:contains(Contributions:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Industries:)').next().text(), []);\n      assert.equal(find('p strong:contains(Receivedcontributions:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Skills:)').next().text(), []);\n      assert.equal(find('p strong:contains(Name:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Email:)').next().text(), 'MyString');\n    });\n  });\n\n  (0, _qunit.test)('delete a individual', function (assert) {\n    server.create('individual');\n    visit('/individuals');\n    click('a:contains(Remove)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'individuals.index');\n      assert.deepEqual(confirmCalledWith, ['Are you sure?']);\n      assert.equal(find('#blankslate').length, 1);\n    });\n  });\n});","define('crowd-hero-frontend/tests/acceptance/individuals-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/individuals-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/individuals-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/acceptance/orgs-test', ['exports', 'ember', 'qunit', 'crowd-hero-frontend/tests/helpers/start-app'], function (exports, _ember, _qunit, _crowdHeroFrontendTestsHelpersStartApp) {\n\n  var application;\n  var originalConfirm;\n  var confirmCalledWith;\n\n  (0, _qunit.module)('Acceptance: Org', {\n    beforeEach: function beforeEach() {\n      application = (0, _crowdHeroFrontendTestsHelpersStartApp['default'])();\n      originalConfirm = window.confirm;\n      window.confirm = function () {\n        confirmCalledWith = [].slice.call(arguments);\n        return true;\n      };\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(application, 'destroy');\n      window.confirm = originalConfirm;\n      confirmCalledWith = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /orgs without data', function (assert) {\n    visit('/orgs');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'orgs.index');\n      assert.equal(find('#blankslate').text().trim(), 'No Orgs found');\n    });\n  });\n\n  (0, _qunit.test)('visiting /orgs with data', function (assert) {\n    server.create('org');\n    visit('/orgs');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'orgs.index');\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('create a new org', function (assert) {\n    visit('/orgs');\n    click('a:contains(New Org)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'orgs.new');\n\n      fillIn('label:contains(Type) input', 'MyString');\n      fillIn('label:contains(Members) input', 'MyString');\n      fillIn('label:contains(Partners) input', 'MyString');\n      fillIn('label:contains(Locations) input', []);\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributions) input', 'MyString');\n      fillIn('label:contains(Industries) input', []);\n      fillIn('label:contains(Receivedcontributions) input', 'MyString');\n      fillIn('label:contains(Skills) input', []);\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('update an existing org', function (assert) {\n    server.create('org');\n    visit('/orgs');\n    click('a:contains(Edit)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'orgs.edit');\n\n      fillIn('label:contains(Type) input', 'MyString');\n      fillIn('label:contains(Members) input', 'MyString');\n      fillIn('label:contains(Partners) input', 'MyString');\n      fillIn('label:contains(Locations) input', []);\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributions) input', 'MyString');\n      fillIn('label:contains(Industries) input', []);\n      fillIn('label:contains(Receivedcontributions) input', 'MyString');\n      fillIn('label:contains(Skills) input', []);\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('show an existing org', function (assert) {\n    server.create('org');\n    visit('/orgs');\n    click('a:contains(Show)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'orgs.show');\n\n      assert.equal(find('p strong:contains(Type:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Members:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Partners:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Locations:)').next().text(), []);\n      assert.equal(find('p strong:contains(Causes:)').next().text(), []);\n      assert.equal(find('p strong:contains(Contributions:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Industries:)').next().text(), []);\n      assert.equal(find('p strong:contains(Receivedcontributions:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Skills:)').next().text(), []);\n      assert.equal(find('p strong:contains(Name:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Email:)').next().text(), 'MyString');\n    });\n  });\n\n  (0, _qunit.test)('delete a org', function (assert) {\n    server.create('org');\n    visit('/orgs');\n    click('a:contains(Remove)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'orgs.index');\n      assert.deepEqual(confirmCalledWith, ['Are you sure?']);\n      assert.equal(find('#blankslate').length, 1);\n    });\n  });\n});","define('crowd-hero-frontend/tests/acceptance/orgs-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/orgs-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/orgs-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/acceptance/users-test', ['exports', 'ember', 'qunit', 'crowd-hero-frontend/tests/helpers/start-app'], function (exports, _ember, _qunit, _crowdHeroFrontendTestsHelpersStartApp) {\n\n  var application;\n  var originalConfirm;\n  var confirmCalledWith;\n\n  (0, _qunit.module)('Acceptance: User', {\n    beforeEach: function beforeEach() {\n      application = (0, _crowdHeroFrontendTestsHelpersStartApp['default'])();\n      originalConfirm = window.confirm;\n      window.confirm = function () {\n        confirmCalledWith = [].slice.call(arguments);\n        return true;\n      };\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(application, 'destroy');\n      window.confirm = originalConfirm;\n      confirmCalledWith = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /users without data', function (assert) {\n    visit('/users');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'users.index');\n      assert.equal(find('#blankslate').text().trim(), 'No Users found');\n    });\n  });\n\n  (0, _qunit.test)('visiting /users with data', function (assert) {\n    server.create('user');\n    visit('/users');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'users.index');\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('create a new user', function (assert) {\n    visit('/users');\n    click('a:contains(New User)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'users.new');\n\n      fillIn('label:contains(Locations) input', []);\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributions) input', 'MyString');\n      fillIn('label:contains(Industries) input', []);\n      fillIn('label:contains(Receivedcontributions) input', 'MyString');\n      fillIn('label:contains(Skills) input', []);\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('update an existing user', function (assert) {\n    server.create('user');\n    visit('/users');\n    click('a:contains(Edit)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'users.edit');\n\n      fillIn('label:contains(Locations) input', []);\n      fillIn('label:contains(Causes) input', []);\n      fillIn('label:contains(Contributions) input', 'MyString');\n      fillIn('label:contains(Industries) input', []);\n      fillIn('label:contains(Receivedcontributions) input', 'MyString');\n      fillIn('label:contains(Skills) input', []);\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('show an existing user', function (assert) {\n    server.create('user');\n    visit('/users');\n    click('a:contains(Show)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'users.show');\n\n      assert.equal(find('p strong:contains(Locations:)').next().text(), []);\n      assert.equal(find('p strong:contains(Causes:)').next().text(), []);\n      assert.equal(find('p strong:contains(Contributions:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Industries:)').next().text(), []);\n      assert.equal(find('p strong:contains(Receivedcontributions:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Skills:)').next().text(), []);\n      assert.equal(find('p strong:contains(Name:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Email:)').next().text(), 'MyString');\n    });\n  });\n\n  (0, _qunit.test)('delete a user', function (assert) {\n    server.create('user');\n    visit('/users');\n    click('a:contains(Remove)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'users.index');\n      assert.deepEqual(confirmCalledWith, ['Are you sure?']);\n      assert.equal(find('#blankslate').length, 1);\n    });\n  });\n});","define('crowd-hero-frontend/tests/acceptance/users-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/users-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/users-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/contribution/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - contribution/adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'contribution/adapter.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/contribution/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - contribution/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'contribution/model.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/contributions/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - contributions/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'contributions/edit/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/contributions/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - contributions/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'contributions/index/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/contributions/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - contributions/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'contributions/new/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/event/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - event/adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'event/adapter.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/event/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - event/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'event/model.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/events/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - events/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'events/edit/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/events/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - events/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'events/index/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/events/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - events/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'events/new/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('crowd-hero-frontend/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'crowd-hero-frontend/tests/helpers/start-app', 'crowd-hero-frontend/tests/helpers/destroy-app'], function (exports, _qunit, _crowdHeroFrontendTestsHelpersStartApp, _crowdHeroFrontendTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _crowdHeroFrontendTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _crowdHeroFrontendTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('crowd-hero-frontend/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/helpers/resolver', ['exports', 'crowd-hero-frontend/resolver', 'crowd-hero-frontend/config/environment'], function (exports, _crowdHeroFrontendResolver, _crowdHeroFrontendConfigEnvironment) {\n\n  var resolver = _crowdHeroFrontendResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _crowdHeroFrontendConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _crowdHeroFrontendConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('crowd-hero-frontend/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/helpers/start-app', ['exports', 'ember', 'crowd-hero-frontend/app', 'crowd-hero-frontend/config/environment'], function (exports, _ember, _crowdHeroFrontendApp, _crowdHeroFrontendConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _crowdHeroFrontendConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _crowdHeroFrontendApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('crowd-hero-frontend/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/individual/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - individual/adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'individual/adapter.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/individual/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - individual/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'individual/model.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/individuals/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - individuals/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'individuals/edit/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/individuals/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - individuals/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'individuals/index/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/individuals/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - individuals/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'individuals/new/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/config.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/config.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/factories/contact.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories/contact.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/contact.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/factories/contribution.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories/contribution.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/contribution.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/factories/event.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories/event.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/event.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/factories/individual.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories/individual.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/individual.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/factories/org.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories/org.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/org.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/factories/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/user.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mirage/scenarios/default.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/scenarios/default.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/scenarios/default.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mixins/contributions/save-model-mixin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins/contributions/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/contributions/save-model-mixin.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mixins/events/save-model-mixin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins/events/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/events/save-model-mixin.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mixins/individuals/save-model-mixin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins/individuals/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/individuals/save-model-mixin.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mixins/orgs/save-model-mixin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins/orgs/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/orgs/save-model-mixin.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/mixins/users/save-model-mixin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins/users/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/users/save-model-mixin.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/org/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - org/adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'org/adapter.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/org/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - org/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'org/model.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/orgs/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - orgs/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'orgs/edit/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/orgs/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - orgs/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'orgs/index/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/orgs/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - orgs/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'orgs/new/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/test-helper', ['exports', 'crowd-hero-frontend/tests/helpers/resolver', 'ember-qunit'], function (exports, _crowdHeroFrontendTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_crowdHeroFrontendTestsHelpersResolver['default']);\n});","define('crowd-hero-frontend/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/transforms/array.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/array.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'transforms/array.js should pass jshint.\\ntransforms/array.js: line 7, col 14, \\'Em\\' is not defined.\\ntransforms/array.js: line 9, col 14, \\'Em\\' is not defined.\\ntransforms/array.js: line 14, col 14, \\'Em\\' is not defined.\\ntransforms/array.js: line 16, col 14, \\'Em\\' is not defined.\\n\\n4 errors');\n  });\n});","define('crowd-hero-frontend/tests/unit/event/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('event', 'Unit | Model | event', {\n    // Specify the other units that are required for this test.\n    needs: ['model:user']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('crowd-hero-frontend/tests/unit/event/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/event/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/event/model-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/unit/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('crowd-hero-frontend/tests/unit/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/index/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/index/route-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/unit/individual/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('individual', 'Unit | Model | individual', {\n    // Specify the other units that are required for this test.\n    needs: ['model:org']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('crowd-hero-frontend/tests/unit/individual/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/individual/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/individual/model-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/unit/org/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('org', 'Unit | Model | org', {\n    // Specify the other units that are required for this test.\n    needs: ['model:user', 'model:org']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('crowd-hero-frontend/tests/unit/org/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/org/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/org/model-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/unit/transforms/array-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:array', 'Unit | Transform | array', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('crowd-hero-frontend/tests/unit/transforms/array-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/transforms/array-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/array-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/unit/user/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: ['model:contribution']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('crowd-hero-frontend/tests/unit/user/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/user/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/user/model-test.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/user/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - user/adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'user/adapter.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/user/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - user/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'user/model.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/users/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - users/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/edit/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/users/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - users/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/index/route.js should pass jshint.');\n  });\n});","define('crowd-hero-frontend/tests/users/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - users/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/new/route.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('crowd-hero-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhnrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}